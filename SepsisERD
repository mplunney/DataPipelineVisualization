import pyexasol
import pygraphviz as pgv
from colour import Color

# instantiate pyexasol connection
DSN = 'exasol'
pwFile = '//phcmh07/Users3/171998/My Docs/p.txt'
pwf = open(pwFile)
pw = pwf.read()
pwf.close()
cx = pyexasol.connect(dsn=DSN, user='171998', password=pw, schema='DEV_PE', compression=True, quote_ident=True)

# get database object relationships from Exasol
objectRelations = cx.export_to_pandas(
    '''
        SELECT DISTINCT
            "BuildOrderNBR" AS "stage"
            ,build."UpstreamObjectNM" AS "upstreamObject"
            ,build."DownstreamObjectNM" AS "downstreamObject"
        FROM DEV_PE."SepsisDataSourceBuild_OrderObject" oo
        INNER JOIN
            (
                SELECT DISTINCT
                    REPLACE(REFERENCED_OBJECT_NAME,'_vw') AS "UpstreamObjectNM"
                    ,REPLACE(OBJECT_NAME,'_vw')  AS "DownstreamObjectNM"
                FROM SYS.EXA_DBA_DEPENDENCIES
                WHERE REFERENCED_OBJECT_NAME LIKE 'Sepsis_%'
                AND OBJECT_SCHEMA <> 'DEV_NIP'
            ) AS build
            ON oo."DatabaseObjectNM" = build."UpstreamObjectNM"
        ORDER BY "BuildOrderNBR"
        ;
    '''
)

cx.close()

# print(objectRelations)

#create color palatte for m number of data transfer stages

m = objectRelations['stage'].max()
stageColors = {}
n = 1

colors = list(Color("blue").range_to(Color("orange"),m))

while n < m + 1:
    for color in colors:
        stageColors.update({n: color})
        n += 1
        continue
        
# print(stageColors)

# instantiate graphviz object, assign graph-level attributes
graphCode = pgv.AGraph(strict=False, directed=True, fontsize = 32, label = 'SepsisERD', labelloc = 't', rankdir = 'LR')

# create function to add nodes and edges, with arguments for each node and stage
def graph(upstreamObject, downstreamObject, stage):
    stageColor = stageColors[stage]
    graphCode.add_edge(upstreamObject, downstreamObject, label = stage, fontsize = 28, color = stageColor, penwidth = 2, arrowsize = 2)

# iterate through each relationship and stage, passing dataframe columns as arguments to graph function  
for i, row in objectRelations.iterrows():
    graph(row.iloc[1], row.iloc[2], row.iloc[0])

# visualize DOT language text
graphText = graphCode.string()
# print(graphText)    

# create image output file
graphCode.layout(prog = "dot")
graphCode.draw('SepsisERD.png', format = 'png', prog = 'dot')
